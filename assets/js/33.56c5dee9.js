(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{671:function(s,n,t){"use strict";t.r(n);var a=t(5),e=Object(a.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("Boxx"),s._v(" "),t("h2",{attrs:{id:"gzip-压缩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gzip-压缩"}},[s._v("#")]),s._v(" Gzip 压缩")]),s._v(" "),t("p",[s._v(" Nginx 开启 Gzip 压缩功能，可以使网站的 css、js 、xml、html 文件在传输时进行压缩，提高网页的访问速度,有效地节约带宽,进而优化 Nginx 性能! 经过 Gzip 压缩后页面大小可以变为原来的 30%甚至更小，这样，用户浏览页面的时候速度会快得多。Gzip 的压缩页面需要浏览器和服务器双方都支持，实际上就是服务器端压缩，传到浏览器后浏览器解压并解析。浏览器那里不需要我们担心，因为目前的巨大多数浏览器 都支持解析 Gzip 过的页面。"),t("br"),s._v("\n 开启 Gzip 功能后，Nginx 服务器会根据配置的策略对发送的内容, 如 css、js、xml、html 等静态资源进行压缩, 使得这些内容大小减少，在用户接收到返回内容之前对其进行处理，以压缩后的数据展现给客户。这样不仅可以节约大量的出口带宽，提高传输效率，还能提升用户快的感知体验, 一举两得; 尽管会消耗一定的 cpu 资源，但是为了给用户更好的体验还是值得的。"),t("br"),s._v("\n Web 网站上的图片，视频等其它多媒体文件以及大文件，因为压缩前后文件大小压缩差异不大，压缩效果不好，反而会增加 cup 的消耗，所以对于图片或大文件没有必要进行压缩。如果想要优化，可以采用客户端缓存的方法进行性能优化。Gzip 压缩可以配置 http,server 和 location 模块下。"),t("br"),s._v("\n 对于字体的处理,只需要为 ttf、otf 和 svg 字体启用 gzip，对其他字体格式进行 gzip 压缩时效果不明显。"),t("code",[s._v("gzip_types font/ttf font/otf image/svg+xml")])]),s._v(" "),t("h2",{attrs:{id:"nginx开启gzip压缩参数说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nginx开启gzip压缩参数说明"}},[s._v("#")]),s._v(" Nginx开启Gzip压缩参数说明")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 开启gzip压缩服务")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("gzip")]),s._v(" on"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# gzip压缩是要申请临时内存空间的，假设前提是压缩后大小是小于等于压缩前的。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 例如，如果原始文件大小为10K，那么它超过了8K，所以分配的内存是8 * 2 = 16K;再例如，")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 原始文件大小为18K，很明显16K也是不够的，那么按照 8 * 2 * 2 = 32K的大小申请内存。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果没有设置，默认值是申请跟原始数据相同大小的内存空间去存储gzip压缩结果。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 例如 4 4k 代表以4k为单位，按照原始数据大小以4k为单位的4倍申请内存。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 4 8k 代表以8k为单位，按照原始数据大小以8k为单位的4倍申请内存。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果没有设置，默认值是申请跟原始数据相同大小的内存空间去存储gzip压缩结果。")]),s._v("\ngzip_buffers "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 8k"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# nginx对于静态文件的处理模块。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 该模块可以读取预先压缩的gz文件，这样可以减少每次请求进行gzip压缩的CPU资源消耗。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 该模块启用后，nginx首先检查是否存在请求静态文件的gz结尾的文件，如果有则直接返回该gz文件内容。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 为了要兼容不支持gzip的浏览器，启用gzip_static模块就必须同时保留原始静态文件和gz文件。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这样的话，在有大量静态文件的情况下，将会大大增加磁盘空间。我们可以利用nginx的反向代理功能实现只保留gz文件。")]),s._v("\ngzip_static on"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("off\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启用gzip压缩的最小文件，小于设置值的文件将不会压缩")]),s._v("\ngzip_min_length 1k"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# gzip压缩基于的http协议版本，默认就是HTTP 1.1")]),s._v("\ngzip_http_version "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间，后面会有详细说明")]),s._v("\ngzip_comp_level "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 需要进行gzip压缩的Content-Type的Header的类型。建议js、text、css、xml、json都要进行压缩；")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 图片就没必要了，gif、jpge文件已经压缩得很好了，就算再压，效果也不好，而且还耗费cpu。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# javascript有多种形式。其中的值可以在 mime.types 文件中找到。")]),s._v("\ngzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认值：off")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# Nginx作为反向代理的时候启用，开启或者关闭后端服务器返回的结果，匹配的前提是后端服务器必须要返回包含"Via"的 header头。')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# off - 关闭所有的代理结果数据的压缩")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# expired - 启用压缩，如果header头中包含 "Expires" 头信息')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# no-cache - 启用压缩，如果header头中包含 "Cache-Control:no-cache" 头信息')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# no-store - 启用压缩，如果header头中包含 "Cache-Control:no-store" 头信息')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# private - 启用压缩，如果header头中包含 "Cache-Control:private" 头信息')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# no_last_modified - 启用压缩,如果header头中不包含 "Last-Modified" 头信息')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# no_etag - 启用压缩 ,如果header头中不包含 "ETag" 头信息')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# auth - 启用压缩 , 如果header头中包含 "Authorization" 头信息')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# any - 无条件启用压缩")]),s._v("\ngzip_proxied "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("off"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("expired"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("no-cache"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("no-store"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("private"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("no_last_modified"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("no_etag"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("auth"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("any"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 是否在http header中添加Vary: Accept-Encoding，建议开启")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩")]),s._v("\ngzip_vary on"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 禁用IE 6 gzip")]),s._v("\ngzip_disable "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"MSIE [1-6]\\."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br")])]),t("h2",{attrs:{id:"客户端和服务器进行gzip压缩的请求和处理过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#客户端和服务器进行gzip压缩的请求和处理过程"}},[s._v("#")]),s._v(" 客户端和服务器进行gzip压缩的请求和处理过程")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AnyFork/blog-images/markdown/202203141006242.png",alt:""}})]),s._v(" "),t("ul",[t("li",[s._v("整个请求过程来看，开启gzip和不开启gip功能，其http的请求和返回过程是一致的，不同的是参数。")]),s._v(" "),t("li",[s._v("当开启HTTP的gzip功能时，客户端发出http请求时，会通过headers中的Accept-Encoding属性告诉服务器“我支持gzip解压，解压格式（算法）deflate,sdch为：”。Accept-Encoding:gzip,deflate,sdch。\n注意，不是request说自己支持解压，Nginx返回response数据的时候就一定会压缩。这还要看本次Nginx返回数据的格式是什么，如果返回数据的原始数据格式，和设置的gzip_types相符合，这时Nginx才会进行压缩。")]),s._v(" "),t("li",[s._v("Nginx返回response headers是，如果数据被压缩了，就会在Content-Encoding属性中标示gzip，表示接下来返回的response")]),s._v(" "),t("li",[s._v("content是经过压缩的；并且在Content-Type属性中表示数据的原始格式。最后返回经过压缩的response content给客户端，客户端再进行解压。这里注意一下，在客户端发送的headers里面，有一个deflate,sdch。这是两种压缩算法，如果读者感兴趣，可以查查相关的资料（我建议查查，了解哈弗曼压缩算法对扩展自己的架构思路很有帮助）\n"),t("Reward")],1)])],1)}),[],!1,null,null,null);n.default=e.exports}}]);